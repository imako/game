module.exports = {
    "harvester": {
                body: [WORK,WORK,CARRY,MOVE],
                lim: 2,
                actn: function(creep){
                        if(creep.store.getFreeCapacity() > 0) {
                            var sources = creep.room.find(FIND_SOURCES);
                            if(creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {
                                creep.moveTo(sources[0], {visualizePathStyle: {stroke: '#ffaa00'}});
                            }
                        }
                        else {
                            var targets = creep.room.find(FIND_STRUCTURES, {
                                    filter: (structure) => {
                                        return (structure.structureType == STRUCTURE_EXTENSION ||
                                                structure.structureType == STRUCTURE_SPAWN ||
                                                structure.structureType == STRUCTURE_TOWER) &&
                                                structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0;
                                    }
                            });
                            if(targets.length > 0) {
                                if(creep.transfer(targets[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                                    creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#ffffff'}});
                                }
                            }
                            if (targets.length == 0){
                                creep.moveTo(Game.flags.Flag1);
                            }
                        }
                    },
                },
    "builder": {
                body: [WORK,WORK,CARRY,MOVE],
                lim: 2,
                actn: function(creep){
                        if(creep.memory.building && creep.store[RESOURCE_ENERGY] == 0) {
                    creep.memory.building = false;
                    //creep.say('ðŸ”„ harvest');
        	    }
        	    if(!creep.memory.building && creep.store.getFreeCapacity() == 0) {
        	        creep.memory.building = true;
        	        //creep.say('ðŸš§ build');
        	    }

        	    if(creep.memory.building) {
        	        var targets = creep.room.find(FIND_CONSTRUCTION_SITES);
                    if(targets.length) {
                        if(creep.build(targets[0]) == ERR_NOT_IN_RANGE) {
                            creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#ffffff'}});
                        }
                    }
        	    }
        	    else {
        	        var sources = creep.room.find(FIND_SOURCES);
                    if(creep.harvest(sources[1]) == ERR_NOT_IN_RANGE) {
                        creep.moveTo(sources[1], {visualizePathStyle: {stroke: '#ffaa00'}});
                    }
        	    }

                    },
                },
    "upgrader": {
                body: [WORK,WORK,CARRY,MOVE],
                lim: 4,
                actn: function(creep){
                  if(creep.memory.upgrading && creep.store[RESOURCE_ENERGY] == 0) {
                      creep.memory.upgrading = false;
                      //creep.say('ðŸ”„ harvest');
            	    }
            	    if(!creep.memory.upgrading && creep.store.getFreeCapacity() == 0) {
            	        creep.memory.upgrading = true;
            	        //creep.say('âš¡ upgrade');
            	    }

            	    if(creep.memory.upgrading) {
                        if(creep.upgradeController(creep.room.controller) == ERR_NOT_IN_RANGE) {
                            creep.moveTo(creep.room.controller, {visualizePathStyle: {stroke: '#ffffff'}});
                        }
                    }
                    else {
                        var sources = creep.room.find(FIND_SOURCES);
                        if(creep.harvest(sources[1]) == ERR_NOT_IN_RANGE) {
                            creep.moveTo(sources[1], {visualizePathStyle: {stroke: '#ffaa00'}});
                        }
                    }
        	       }
                },
    "tower": {
                body: [RANGED_ATTACK,RANGED_ATTACK],
                lim: 0,
                actn: function(creep){

                },
              },
    "carrier":{
                body: [WORK,CARRY,CARRY,MOVE],
                lim: 1,
                actn: function(creep){
                  if(creep.store.getFreeCapacity() > 0) {
                    var container = creep.room.find(STRUCTURE_CONTAINER);
                    if(creep.withdraw(container, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                      creep.moveTo(container);
                    }
                  }
                  else {
                    var targets = creep.room.find(FIND_STRUCTURES, {
                            filter: (structure) => {
                                return (structure.structureType == STRUCTURE_EXTENSION ||
                                        structure.structureType == STRUCTURE_SPAWN ||
                                        structure.structureType == STRUCTURE_TOWER) &&
                                        structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0;
                            }
                    });
                    if(targets.length > 0) {
                        if(creep.transfer(targets[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                            creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#ffffff'}});
                        }
                    }
                    if (targets.length == 0){
                        creep.moveTo(Game.flags.Flag1);
                    }
                  }
                },
              },

    "miner":{
                body: [WORK,WORK,WORK,WORK,WORK,MOVE],
                lim: 0,
                actn: function(creep){
                  var sources = creep.room.find(FIND_SOURCES);
                  if(creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {
                      creep.moveTo(sources[0], {visualizePathStyle: {stroke: '#ffaa00'}});
                  }
                },
              },

};
